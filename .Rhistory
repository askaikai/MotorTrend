require(tree)
library("tree")
install.packages('tree')
require('tree')
rm(list=ls())
require(ISLR)
require(tree)
attach(Carseats)
hist(Sales)
High=ifelse(Sales<=8,"No","Yes")
High
Carseats=data.frame(Carseats, High)
tree.carseats=tree(High~.-Sales,data=Carseats)
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats,pretty=0)
tree.carseats
set.seed(1011)
train=sample(1:nrow(Carseats),250)
tree.carseats=tree(High~.-Sales,Carseats,subset=train)
plot(tree.carseats);text(tree.carseats,pretty=0)
tree.pred=predict(tree.carseats,Carseats[-train,],type="class")
with(Carseats[-train,],table(tree.pred,High))
(72+33)/150
cv.carseats=cv.tree(tree.carseats,FUN=prune.misclass)
cv.carseats
plot(cv.carseats)
prune.carseats=prune.misclass(tree.carseats,best=13)
plot(prune.carseats);text(prune.carseats,pretty=0)
```
tree.pred=predict(prune.carseats,Carseats[-train,],type="class")
with(Carseats[-train,],table(tree.pred,High))
(72+32)/150
require(randomForest)
require(MASS)
install.packages('randomForest')
require(randomForest)
require(MASS)
set.seed(101)
dim(Boston)
train=sample(1:nrow(Boston),300)
?Boston
rf.boston=randomForest(medv~.,data=Boston,subset=train)
rf.boston
oob.err=double(13)
oob.err
test.err=double(13)
for(mtry in 1:13){
fit=randomForest(medv~.,data=Boston,subset=train,mtry=mtry,ntree=400)
oob.err[mtry]=fit$mse[400]
pred=predict(fit,Boston[-train,])
test.err[mtry]=with(Boston[-train,],mean((medv-pred)^2))
cat(mtry," ")
}
matplot(1:mtry,cbind(test.err,oob.err),pch=19,col=c("red","blue"),type="b",ylab="Mean Squared Error")
legend("topright",legend=c("OOB","Test"),pch=19,col=c("red","blue"))
require(gbm)
install.packages('gbm')
require(gbm)
boost.boston=gbm(medv~.,data=Boston[train,],distribution="gaussian",n.trees=10000,shrinkage=0.01,interaction.depth=4)
summary(boost.boston)
plot(boost.boston,i="lstat")
plot(boost.boston,i="rm")
n.trees=seq(from=100,to=10000,by=100)
predmat=predict(boost.boston,newdata=Boston[-train,],n.trees=n.trees)
dim(predmat)
berr=with(Boston[-train,],apply( (predmat-medv)^2,2,mean))
plot(n.trees,berr,pch=19,ylab="Mean Squared Error", xlab="# Trees",main="Boosting Test Error")
abline(h=min(test.err),col="red")
install.packages("KernSmooth")
library(KernSmooth)
?par
par(mfrow)
par('mfrow')
?pch
oauth_endpoints("github")
library(httr)
oauth_endpoints("github")
?oauth_endpoints
myapp <- oauth_app("github", "56b637a5baffac62cad9")
?oauth_app
rm(list=ls())
require(data.table)
fileUrl = 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv'
download.file(fileUrl, destfile='AmericanCommunitySurvey.csv',method='curl')
acs = fread('AmericanCommunitySurvey.csv')
View(acs)
require(sqldf)
?dbSendQuery
?dbConnect
?dbSendQuery
?sqldf
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select * from acs")
pwgtp1 = sqldf("select pwgtp1 from acs where AGEP < 50")
length(pwgtp1)
class(pwgtp1)
View(pwgtp1)
rm(list=ls())
library(lattice)
?xyplot
x = rnorm(100)
y=x
xyplot(y~x)
?xyplot
?qplot
library(ggplot2)
?qplot
rm(list=ls())
ls()
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
print(p)
?trellis.par.set
?print.trellis
?par
?splom
rm(list=ls())
library(datasets)
data(airquality)
library(ggplot2)
?qplot
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
data(airquality)
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?geom
rm(list=ls())
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
ls()
g
library(movies)
qplot(votes, rating, data = movies)
?ggplot
ggplot(movies, aes(votes, rating))
ggplot(movies, aes(movies$votes, movies$rating))
g <- ggplot(movies, aes(votes, rating))
g
g + geom_line()
g
g<-g+geom_line()
g
?geom_bar
rm(list=ls())
library(ggplot2)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
g <- ggplot(movies, aes(votes, rating))
g<-g+geom_line()
g
rm(list=ls())
library(lattice)
?xyplot
x = rnorm(100)
y=x
ls()
p=xyplot(x~y)
p
rm(list=ls())
library(lattice)
?panel.abline
?text
?points
?axis
?llines
q90
q()
library(mtcars)
library('mtcars)
library('mtcars')
library(datasets)
?mtcars
head(mtcars)
?pnorm
pnorm(.95,mean = mean(mtcars$mpg),sd = sd(mtcars$mpg))
qnorm(.95,mean = mean(mtcars$mpg),sd = sd(mtcars$mpg))
qnorm(.95)
qnorm(.05)
mean(mtcars$mpg) - qnorm(.05)*sd(mtcars$mpg)/sqrt(length(mtcars))
dim(mtcars$mpg)
length(mtcars$mpg)
mean(mtcars$mpg) - qnorm(.05)*sd(mtcars$mpg)/sqrt(length(mtcars$mpg))
class(mtcars$cyl)
?t.test
?subset
cyl4 = subset(mtcars, mpg, cyl==4)
cyl4 = mtcars$mpg[mtcars$cyl==4]
cyl6 = mtcars$mpg[mtcars$cyl==4]
?t.test
t.test(cyl4, cyl6, alternative = 'two.sided')
cyl4
cyl6
cyl6 = mtcars$mpg[mtcars$cyl==6]
t.test(cyl4, cyl6, alternative = 'two.sided')
n=100
x=3
sd=1.1
zlow = qnorm(.025)
zhigh = qnorm(.975)
x-zlow*sd/sqrt(n)
x-zhigh*sd/sqrt(n)
?pt
?pbinom
pbinom(55,100,.5,lower.tail=FALSE)
pbinom(55,100,.5,lower.tail=TRUE)
pbinom(45,100,.5,lower.tail=TRUE)
ppois(15800, 520*30, lower.tail = FALSE)
ppois(15800-1, 520*30, lower.tail = FALSE)
x1=10
x2=11
n1 =100
n2 =100
s=4
se = s*sqrt(1/n1+1/n2)
ts <- (m2 - m1) / se
ts <- (x2 - x1) / se
2 * pnorm(-abs(ts))
?power.z.test
?power.z\t.test
?power.t.test
qnorm(.95)-sqrt(100)*(11-10)/4
.8-qnorm(.95)
qnorm(.95)
((qnorm(.95)-qnorm(.8))*.04/(.01))^2
((qnorm(.95)-qnorm(.2))*.04/(.01))^2
cyl6 = mtcars$mpg[mtcars$cyl==8]
t.test(cyl8, cyl6, alternative = 'two.sided')
cyl6 = mtcars$mpg[mtcars$cyl==6]
cyl8 = mtcars$mpg[mtcars$cyl==8]
t.test(cyl8, cyl6, alternative = 'two.sided')
pt(-5.29, 18.50, lower.tail = FALSE)
pt(-5.29, 18.50)
mixprob <- (n8 - 1) / (n8 + n6 - 2)
n8=length(cyl8)
n6=length(cyl6)
mixprob <- (n8 - 1) / (n8 + n6 - 2)
mixprob
s8 = sd(cyl8)
s6 = sd(cyl6)
s <- sqrt(mixprob * s8 ^ 2  +  (1 - mixprob) * s6 ^ 2)
s
m8 = mean(cyl8)
m6 = mean(cyl6)
z <- (m8 - m6) / (s * sqrt(1 / n8 + 1 / n6))
z
2*pnorm(-abs(z))
qnorm(.95)
qnorm(-.05)
qnorm(.05)
n=100
m=12
z = qnorm(.95)
s=4
m+z*s/sqrt(n)
pre = c(140, 138, 150, 148, 135)
post = c(132, 135, 151, 146, 130)
t.test(pre, post, alternative = 'two.sided', paired = TRUE)
n=9
m=1100
s=30
m+qnorm(.975)*s/sqrt(n)
m-qnorm(.025)*s/sqrt(n)
qnorm(.975)*s/sqrt(n)
qnorm(.025)
rm(list=ls())
n=100
m=3
s=1.1
m+qnorm(.975)*s/sqrt(n)
m-qnorm(.025)*s/sqrt(n)
n=100
x=3
sd=1.1
zlow = qnorm(.025)
zhigh = qnorm(.975)
x-zlow*sd/sqrt(n)
x-zhigh*sd/sqrt(n)
n=9
m=1100
s=30
x-qnorm(.025)*sd/sqrt(n)
x-qnorm(.025)*s/sqrt(n)
m-qnorm(.025)*s/sqrt(n)
m+qnorm(.975)*s/sqrt(n)
m-qnorm(.975)*s/sqrt(n)
round(pbinom(2, prob = .5, size = 4, lower.tail = FALSE),4)
pv <- ppois(10-1, lambda = 1787/100*1, lower.tail = FALSE)
pv
pv <- ppois(10-1, lambda = 1787/100*1, lower.tail = TRUE)
px
pv
ppois(10-1, lambda = 1787/100*1, lower.tail = TRUE)
ppois(10 - 1, lambda = 1/100 * 1787, lower.tail = FALSE)
ppois(10 - 1, lambda = 1/100 * 1787, lower.tail = TRUE)
ppois(9, 1/100*1787, lower.tail = FALSE)
rm(list = ls())
ls()
library(datasets)
head(mtcars)
n=length(mtcars$mpg)
m=mean(mtcars$mpg)
s = sd(mtcars$mpg)
m+qnorm(.95*s/sqrt(n))
m+qnorm(.95)*s/sqrt(n)
cyl4 = mtcars$mpg[mtcars$cyl==4]
cyl6 = mtcars$mpg[mtcars$cyl==6]
t.test(cyl4, cyl6, alternative = 'two.sided')
n=100
m=3
s=1.1
m-qnorm(.975)*s/sqrt(n)
m+qnorm(.025)*s/sqrt(n)
m-qnorm(.025)*s/sqrt(n)
pbinom(54, size = 100, prob = 0.5, lower.tail = FALSE)
ppois(15800-1, 520*30, lower.tail = FALSE)
m1=10
m2=11
n1=100
n2=100
s1=s2=4
?power.t.test
power.t.test(n=n1, delta=m2-m1,sd = 4,type='two.sample',alternative = 'two.sided')
power.t.test(n=n1, delta=m2-m1,sd = 4,type='two.sample',alternative = 'two.sided')$type
power.t.test(n=n1, delta=m2-m1,sd = 4,type='two.sample',alternative = 'one.sided')$power
power.t.test(n=n1, delta=m2-m1,sd = 4,alternative = 'one.sided')
power.t.test(n=n1, delta=m2-m1,sd = .4,alternative = 'one.sided')
qnorm(.95)-sqrt(100)*(11-10)/4
qnorm(.05)-sqrt(100)*(11-10)/4
qnorm(.95)-sqrt(100)*(11-10)/4
pnorm(qnorm(.95)-sqrt(100)*(11-10)/4)
pnorm(qnorm(.05)-sqrt(100)*(11-10)/4)
pnorm(qnorm(.05)-sqrt(100)*(11-10)/4,lower.tail = FALSE)
pnorm(10 + qnorm(.95) * .4, mean = 11, sd = .4, lower.tail = FALSE)
power.t.test(delta = .01, sd = .04, type = "one.sample", alt = "one.sided")$n
power.t.test(delta = .01, sd = .04, power = .8, type = "one.sample", alt = "one.sided")$n
power.t.test(delta = .01, sd = .04, power = .8, type = "paired", alt = "one.sided")$n
ppois(9, 1/100*1787, lower.tail = FALSE)
ppois(9, 1/100*1787, lower.tail = TRUE)
ppois(9, 1/100*1787, lower.tail = TRUE)*2
rm(list = ls())
library(datasets)
head(mtcars)
m = mean(mtcars$mpg)
m
s = sd(mtcars$mpg)
n = length(mtcars$mpg)
qnorm(.05)
n
m-qnorm(.05)*s/sqrt(n)
rm(list = ls())
n=100
m=12
s=4
qnorm(.95)
m-qnorm(.95)*s/sqrt(n)
qt(.975, n-1, lower.tail = TRUE)
s/sqrt(n)
m+s/sqrt(n)*1.984
rm(list = ls())
n=9
m=1100
s=30
ct = qt(.975, n-1, lower.tail = TRUE)
ct
m+s/sqrt(n)*1.984
m-s/sqrt(n)*1.984
pbinom(2, size = 4, prob = 0.5, lower.tail = FALSE)
ppois(9, 1/100*1787, lower.tail = TRUE)
ppois(15800-1, 520*30, lower.tail = False)
ppois(15800-1, 520*30, lower.tail = F)
ppois(10-1, .01*1787, lower.tail = T)
rm(list=ls())
n=100
m=3
s=1.1
?qnorm
qnorm(.025)
qnorm(.9755)
qnorm(.975)
m-qnorm(.975)*s*sqrt(n)
m-qnorm(.975)*s/sqrt(n)
m+qnorm(.975)*s/sqrt(n)
rm(list=ls())
n1=9
n2=9
m1 = -3
m2 = 1
s=1.5
s=1.8
ct = qt(.975, n-1, lower.tail = TRUE)
ct = qt(.975, n1-1, lower.tail = TRUE)
ct
ct = qt((1-.05)/2, n1-1, lower.tail = TRUE)
ct
ct = qt((1-.05/2), n1-1, lower.tail = TRUE)
ct
ct = qt((1-.01/2), n1-1, lower.tail = TRUE)
ct
ct*sqrt(s1^2/n1+s2^2/n2)
s1 = 1.5
s2=1.8
ct*sqrt(s1^2/n1+s2^2/n2)
rm(list=ls())
n=9
?qt
ct = qt(.95, n-1, lower.tail = TRUE)
ct
rm(list=ls())
qnorm(.95)
n=100
m=.01
s=.04
cz = qnorm(.95)
z = m/(s/sqrt(n))
pnorm(cz-z)
pnorm(cz-z,lower.tail = FALSE)
power.t.test(power = 0.9, delta = .01, sd = .04, type = "one.sample", alt = "one.sided")$n
rm(list=ls())
zc = qnorm(.975)
n1=288
m1=44
s1=12
n2=288
m2=42.04
s2=12
zc*sqrt(s1^2/n1+s2^2/n2)
m1-m2
rm(list=ls())
(1077+1123)/2
qt(.95, 8, lower.tail = TRUE)
23/1.86
qt(.975, 8, lower.tail = TRUE)
qt(.975, 8, lower.tail = TRUE)*12.36/sqrt(9)
1078+9.5
qt(.975, 8, lower.tail = TRUE)*12.36/sqrt(9)+1078
rm(list=ls())
qt(.975, 8, lower.tail = TRUE)
ct = qt(.975, n-1, lower.tail = TRUE)
ct = qt(.975, 8, lower.tail = TRUE)
ct
m+s/sqrt(n)*ct
m-s/sqrt(n)*ct
rm(list=ls())
m=1100
s=30
n=9
ct = qt(.975, 8, lower.tail = TRUE)
ct
m+s/sqrt(n)*ct
m-s/sqrt(n)*ct
(11*10+12*9+13*11+14*14+15*10+16*6)/60
?rep
a = c(rep(11,10),rep(12,9),rep(13,11),rep(14,14),rep(15,10),rep(16,6))
a
mean(a)
sd(a)
?median
median(a)
quantile(a,.75) - quantile(a,.25)
quantile(a,.75)
quantile(a,.25)
hist(a)
?hist
?plot
plot(a, type = "h")
a = c(rep(0,53), rep(1,47))
a
mean(a)
sd(a)
median(a)
quantile(a,.75) - quantile(a,.25)
562/3279
100-33.7
2409/3258
setwd('~/Documents/Coursera/RegressionModels/MotorTrend'); library(datasets)
d = mtcars; d$am.f = as.factor(d$am) # (0 = automatic, 1 = manual)
mMPG.auto = round(mean(d$mpg[d$am.f=='0']),2); mMPG.man = round(mean(d$mpg[d$am.f=='1']),2);
sdMPG.auto = round(sd(d$mpg[d$am.f=='0']),2); sdMPG.man = round(sd(d$mpg[d$am.f=='1']),2);
dotCol = ifelse(d$wt>median(d$wt),'red','green'); dotBG = ifelse(d$am==0,'black','white')
png(file='Figure1.png', width=240, height=240, units="px", pointsize=8); par(mfrow = c(1, 2))
plot(mpg~am, data=d, pch=21, col=dotCol, bg=dotBG, mgp = c(2, 1, 0),main="1A. Unadjusted \n Transmission Type \n vs. MPG",xlab="Transmission Type", ylab="MPG", cex=.75, axes=FALSE)
axis(1, 0:1, c('Automatic','Manual'), cex=.75); axis(2)
legend('bottom',c('> median weight','<= median weight','Automatic','Manual'), pch=21, cex = .5,col=c('red','green','grey','grey'), pt.bg=c(NA,NA,'black',NA))
plot(resid(lm(am~wt, data=d)), resid(lm(mpg~wt, data=d)), pch=21, col=dotCol, bg=dotBG, axes=FALSE, ann=FALSE, xaxt='n')
title(main="1B. Adjusted by Weight\n Transmission Type \n vs. MPG"); title(ylab="Residual of MPG \n after accounting for Weight", mgp = c(2, 1, 0), cex=.75); title(xlab="Residual of Transmission type \n after accounting for Weight", mgp=c(3,1,0), cex=.75)
axis(1); axis(2); dev.off(); par(mfrow = c(1, 1))
lm.simple = lm(mpg~am.f, data=d); # just am
lm.all = lm(mpg~., data=mtcars); # all variables
lm.mix = lm(mpg~am.f+wt, data = d); # am and wt
lmBoth <- lm(d$mpg ~ d$wt+d$am.f+d$wt*d$am.f) # interaction term
png(file='Figure2.png', width=160, height=160, units="px", pointsize=6); plot(d$wt,d$mpg,pch=19,ann=FALSE); points(d$wt,d$mpg,pch=19,col=((d$am.f=="1")*1+1)) # (1 = automatic, 2 = manual)
abline(c(lmBoth$coeff[1],lmBoth$coeff[2]),col=1,lwd=3) # automatic
abline(c(lmBoth$coeff[1]+lmBoth$coeff[3], lmBoth$coeff[2]+lmBoth$coeff[4]),col=2,lwd=3) # manual
title(main="2. Interaction between \n Weight and Transmission Type"); title(ylab="MPG"); title(xlab="Weight"); legend('topright',c('Automatic','Manual'), pch=21, col=c(1,2), pt.bg=c(1,2), lwd=3); dev.off()
